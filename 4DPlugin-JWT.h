/* --------------------------------------------------------------------------------
 #
 #	4DPlugin-JWT.h
 #	source generated by 4D Plugin Wizard
 #	Project : JWT
 #	author : miyako
 #	2020/04/15
 #  
 # --------------------------------------------------------------------------------*/

#ifndef PLUGIN_JWT_H
#define PLUGIN_JWT_H

#include "4DPluginAPI.h"

#include "C_LONGINT.h"
#include "C_TEXT.h"

#include "openssl/crypto.h"
#include "openssl/hmac.h"
#include "openssl/evp.h"
#include "openssl/ssl.h"
#include "openssl/bio.h"
#include "openssl/buffer.h"
#include "openssl/pkcs12.h"
#include "openssl/err.h"

#include "json/json.h"

#include <jwtpp/jwtpp.hh>

#include "josepp/b64.hpp"
#include "josepp/claims.hpp"
#include "josepp/crypto.hpp"
#include "josepp/digest.hpp"
#include "josepp/header.hpp"
#include "josepp/jws.hpp"
#include "josepp/tools.hpp"
#include "josepp/types.hpp"

#pragma mark -

void JWT_Timestamp(PA_PluginParameters params);
void JWT_Sign(PA_PluginParameters params);
void JWT_Verify(PA_PluginParameters params);

#include <sys/timeb.h>  /* ftime, timeb (for timestamp in millisecond) */
#include <stdio.h> /* snprintf */

long long int getlld(C_TEXT &Param);
long long int getlld(std::string &num);

void convertFromString(std::string &fromString, C_TEXT &toString);
void convertToString(C_TEXT &fromString, std::string &toString);

static std::string base64_encode_uri(const unsigned char *ptr, size_t size);
static void base64_decode_uri(std::vector<unsigned char>& decoded, std::string encoded);

#endif /* PLUGIN_JWT_H */
